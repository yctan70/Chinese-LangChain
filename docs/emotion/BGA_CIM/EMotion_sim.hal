loadrt [emotion]emcmot base_period_nsec=[emotion]base_period servo_period_nsec=[emotion]servo_period traj_period_nsec=[emotion]servo_period key=[emotion]shmem_key num_joints=[system]axes offline=[emotion]offline num_input=[system]input num_output=[system]output joint_mask=7 kine_type=1 use_pdf=[system]use_pdf disable_io=[system]disable_io


loadrt ipc5_sim dda_type=[axis_0](dda_type),[axis_1](dda_type),[axis_2](dda_type)

loadrt threads name1=slow-thread period1=1100000
addf ipc5.make-pulses servo-thread
addf ipc5.make-pulses-slow slow-thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf motion-controller-slow slow-thread
net slow_thread ipc5.use_slow_thread motion.use_slow_thread
net run_thread motion.run_real_module ipc5.run_real_module

#loadrt hal_rio_ser Port=2 In=32 Out=24 Baudrate=115200 Debug=0 Interrupt=1
#loadrt hal_rio_ser Port=2 In=48 Out=48 Baudrate=115200 Debug=0 Interrupt=1
#addf rio.polling slow-thread

#net sv_encoder1 motion.readComPort.ch_data0 readsv.0.encoder
#net sv_encoder2 motion.readComPort.ch_data1 readsv.1.encoder
#net sv_encoder3 motion.readComPort.ch_data2 readsv.2.encoder

#net drv_com_flag0 motion.ComPort.DataFlag0 readsv.pin-flag0
#net drv_com_flag1 motion.ComPort.DataFlag1 readsv.pin-flag1
#net drv_com_enable motion.ComPort.Enable readsv.pin-enable

# connect position commands from motion module to step generator
net X0pos-cmd axis.0.motor-pos-cmd => ipc5.0.position-cmd
net Y0pos-cmd axis.1.motor-pos-cmd => ipc5.1.position-cmd
net Z0pos-cmd axis.2.motor-pos-cmd => ipc5.2.position-cmd

# connect position feedback from step generators
# to motion module
net X0pos-fb ipc5.0.position-fb => axis.0.motor-pos-fb
net Y0pos-fb ipc5.1.position-fb => axis.1.motor-pos-fb
net Z0pos-fb ipc5.2.position-fb => axis.2.motor-pos-fb


# connect enable signals for step generators
net X0en axis.0.amp-enable-out => ipc5.0.enable
net Y0en axis.1.amp-enable-out => ipc5.1.enable
net Z0en axis.2.amp-enable-out => ipc5.2.enable


net reset0 axis.0.amp-reset-out => ipc5.0.reset
net reset1 axis.1.amp-reset-out => ipc5.1.reset
net reset2 axis.2.amp-reset-out => ipc5.2.reset


net resetDone0 axis.0.amp-resetDone-in <= ipc5.0.resetDone
net resetDone1 axis.1.amp-resetDone-in <= ipc5.1.resetDone
net resetDone2 axis.2.amp-resetDone-in <= ipc5.2.resetDone


#unlinkp rio.bit08.out
#net X0en => rio.bit08.out
#unlinkp rio.bit09.out
#net X1en => rio.bit09.out


#unlinkp rio.bit08.out
#net X0en => rio.bit08.out
#unlinkp rio.bit09.out
#net Y0en => rio.bit09.out
#unlinkp rio.bit10.out
#net Z0en => rio.bit10.out

#unlinkp rio.bit11.out
#net X1en => rio.bit11.out
#unlinkp rio.bit12.out
#net Y1en => rio.bit12.out
#unlinkp rio.bit13.out
#net Z1en => rio.bit13.out

# set ipc5 module scaling - get values from ini file
setp ipc5.0.position-scale [axis_0]scale
setp ipc5.1.position-scale [axis_1]scale
setp ipc5.2.position-scale [axis_2]scale

#setp ipc5.0.cal-enc [axis_0]enc_cal
#setp ipc5.1.cal-enc [axis_1]enc_cal
#setp ipc5.2.cal-enc [axis_2]enc_cal
#setp ipc5.3.cal-enc [axis_3]enc_cal
#setp ipc5.4.cal-enc [axis_4]enc_cal
#setp ipc5.5.cal-enc [axis_5]enc_cal

#net com.in16 => axis.0.home-sw-in
#net com.in17 => axis.1.home-sw-in
#net com.in18 => axis.2.home-sw-in

#loadrt not count=1
#addf not.0 servo-thread
#net com.in27 => not.0.in 
#net home4 not.0.out => axis.3.home-sw-in

linksp com.in06 input.estop
#unlinkp rio.bit06.in
#net com.in06  ipc5.in.01

#net estop-out <= iocontrol.0.user-enable-out
#net estop-out => iocontrol.0.emc-enable-in

#setp armLeftkins.dh_angle [dhparam_0]dh_angleXY
#setp armRightkins.dh_angle [dhparam_1]dh_angleXY
